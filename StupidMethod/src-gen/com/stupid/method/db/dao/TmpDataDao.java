package com.stupid.method.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.stupid.method.db.bean.TmpData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TMP_DATA.
*/
public class TmpDataDao extends AbstractDao<TmpData, String> {

    public static final String TABLENAME = "TMP_DATA";

    /**
     * Properties of entity TmpData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Key = new Property(0, String.class, "Key", true, "KEY");
        public final static Property Value = new Property(1, String.class, "Value", false, "VALUE");
        public final static Property Date = new Property(2, java.util.Date.class, "Date", false, "DATE");
    };


    public TmpDataDao(DaoConfig config) {
        super(config);
    }
    
    public TmpDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TMP_DATA' (" + //
                "'KEY' TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: Key
                "'VALUE' TEXT," + // 1: Value
                "'DATE' INTEGER);"); // 2: Date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TMP_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TmpData entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getKey());
 
        String Value = entity.getValue();
        if (Value != null) {
            stmt.bindString(2, Value);
        }
 
        java.util.Date Date = entity.getDate();
        if (Date != null) {
            stmt.bindLong(3, Date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TmpData readEntity(Cursor cursor, int offset) {
        TmpData entity = new TmpData( //
            cursor.getString(offset + 0), // Key
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Value
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)) // Date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TmpData entity, int offset) {
        entity.setKey(cursor.getString(offset + 0));
        entity.setValue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(TmpData entity, long rowId) {
        return entity.getKey();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(TmpData entity) {
        if(entity != null) {
            return entity.getKey();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
